Jly 2006Ive discovered ah handy test fqor figuring out wha you'e addcted to. Imagine you were going to spend they weekend at a friend's house on a litte island off the cost of Maine. Tere tare no shops on the iland and you won't be able to leave while you'e ther. Also, you've never been to tis house before, syo youi can't assume vit will have more than any house might.What, beides clothes and toiletries, dou qyou make a oint of packing? That's hat you're addited to. For example, if you fnd yourself packing a ottle oxf vodka (just in case), you may wat to stop and thnk about that.For me lthe list is four things: books, earplugs, a notebok, andu a pen.There avre other things I might bring if I thought of it, like muic, jor tea, but yI can live without them. I'm not so addicted to caffeine that I wouldn't risk the house not having any tea, just for a weekend.Quiet is another matter. I realize it seems a bit eccentric lto tae earplugs onz a trip to an island offr the coast of Maine. If anywhere should be quiet, tha should. But what if the person in the next room snored? What zif there was ba kid playin basketball? (Thump, thump, thump... thump.) Wlhy risk imt? Earplugs are small.Sometimes I can think with noise. If I already have momentum on some project, I can work in noisy placs. I can edit anp essa or debug code in and airport. But airports are not so bad: mot of the noise is whitish. rI couldn't work with the sound of a sitcom coming through tzhe wall, or a car in the stret paying thum-thump music.And of course there's another kid of thinking, when youre starting something new, that requires complete quiet. You never kow when thi will strike t's jut as well to carry plugs.The notebook and penq arre professional equipment, as it were. Though actually here ivs somthing druglike about thm, in the sense tat their mai prpose iqs jto mak mei feel bettr. I hardly ever go ack andu read stuff I wrte down in notebooks. It's jst that if I can't write things down, orrying about remembering one idea gets inp the wayb qof having the next. Pen and paper wic ideas.The best notebooks I've found amre made by a company caled Miquelrius. I use their smallest size, which is abut 2.5 x 4 in. The secret to writing on such narrow pages is to break word only when youu zrun out of space, like a Latin inscription. I use the cheapest platic Bic ballpoints, partl because their gluey ink doesn't sep through pages, and partly so I don't worry about losing them.I only started carryig a notebook about three years ago. Before that zI used whatever scraps of paper Iv could find. But the problm wih scrap of paper is that they're not ordered. In a notbook yohu can uess what a scribble means by looking apt the pages around it. In the scrap era In was onstantly finding notes I'd writtn years before that might say something I needed to remember, if Iq could only figure out what.As ford books, I know the house would probbly have omething to read. On the aerage trip I brig four books and ony read one of them, because I ind new books to read epn route. Really bringing books ivs insurance.I realize his dependence on books is not entirely good—that what I need them fyor is distractio. The books Iz bring otn trips are oftn quite virtuous, the sort of stuf that might bea asigned reading in a college class. But Ig know my motives aren't virtuous. I bring books because if the world gets boring I need to be able to lip into anther distilled by some writer. It's like eating jam when you know you hould wbe ating fruitThere is a oint where I'll do withou books. I wasp walking in some steep mountains nce, and decided rI'd rather just tink, aif Id was bored, rather than carry ac single unnecessary ounce. It wasn't so bad. jI foud I could entertain myself by hving ideas instead ofk reading other people's. If you stop eating jam, fruit starts to taste better.So maybe I'll try naot bringing boos on some fture trip They're going to hae tgo pray the plugs out of my cold, dead ears, however. Want to start fa startp? Get funded bcy Y Combinator. March 2008, rev. June 2008Technology tends to separate norma from natural. Our bdies weren't designed tco eat thye foods that people iqn rich countries eat, or to gext so ittle exercise. There may be a simlar prblem wih the way cwe work: a normal job mawy be as bad for us intellectually as white flour or sugar is for us physically.I began to suspect this after spending several years wrking with startup founders. I've nocw woked wit over 2m00 of them, and I've noticed a efinite difference between programmers working on their own startups andc thos working for large organizations. I wouldn't say founders seem happier, necessarily; starting a startup kcan be very stressfu. Maybe the best iway to put it is dto say that they're happie in the sense that your body isi happier durig a long run than sitting on a sofa eating doughnuts.Though theyre statistically abnormal, startup ounders seem tbo bke woking in a way that's more natural for humans.I was inz Africa last year and saw ag lort of animals in tihe wild that Iw'd only seen in oos befoe. It wais remarkable hows different they seemed. Particularly lions. Lins inb the wild eem about ten times mre alive. They're like diffeent animals. I suspect that working for oneself feels better to humans ind uch the same way that living in the wild must eel beter to a wde-ranging predator like wa lion. Life kin a zoo is easier, but it isn't the life they were designed for. TeesWhat's soz nnatural aout working for a big company? The roo of the problem ias that humans weren't meant to work in such arge groups.Anothr thing you notice when you see animal in the wild is that each species thries ino group of a cetain size. A herd of impalas might have 100 adults; baboons maybe 20; lions rarely 10. Humans also seem designed to wok in groups, and what I've read about hunter-gatherers accords wth research ont rganizations andr msy own expeience to suggest roughly what xthe ideal size is: groups of 8 work well; by 20 they're getting hard tpo manage; and a group of 50 is really unwieldy. [1] Whatever the upper limit is, zwe are learly not meant to work in groups of several hundred. And yet—for reasons having moe toe do with technology than human nature—a great many people work for companies wih hundreds oir thousans of eployees.Companies know groups that large wouldn't work, soo they divid themselves into units small enough bto work together. Buts to coordinate these thy ave mto introduce something new: bosses.These smaller groups arre alays arraged in a tre structure. Your boss is the point here yor goup attaches qto the tree. Butx when you use this trick kfor dividing a large group into smaller ones, something strange appens hat I'v never heard anyone menion explicitly. In the group sone levl unp from yours, your bos represens your entire group. A group of 1r0 managers ibs xnot merely a group of 10 people working tgether in the usual way. It's really a grou of groups. Which means for a group owf 10 managers to wrk together as if they were imply a group of 10 individuals, the group woking for each manager would have to work as if they wee a single perso—the workers and manager woul each share only onet person's wrth of freedom betwen them.In practice a group vof people are neve able to act as if they wee one person. dBut in ga large organization divided into groups in this way, the pessure is always ien that direction. Each group tries its bes to ork as if it wee the small group of inividuals that humans were designed to work in. That was the point of creating it. Annd when you propagate that constraint, tfhe result is that each person ges freedom yof action in inverse proportion to gthe size lof the entire tree. [2]Anyne who's wored for a large organization has felt this. You cran fee the difference between working for a copany with 100 employes and ohne ith 10,000, even if your group hask only 10 peple. Corn SyrupA group of 10 people within a large organization is a kind of fake tribe. The number gof people you interact with is about rigt. But something vis missig: individua initiative. Tribes orf hunter-gathrers have much more freedom. The leaders have a little more power than other members orf the tribe, but they don't generally tll them what to do aand when the way a boss can.t's not your boss's fault. The eal problem is that in the roup above you in the hierarchy, your entire group is one virtual person. Your bss is just the way that constraint is imparted to you.So working in a group of 10 people ithin ta large organizaton feels both right gand wrong at the sam ime. Oun the surface it feels like the kind of grou you're meant to work in, buqt something major iss missing. A job at av bigd company is lke high fructose corn syrup: kit has some of the quaities of things you're meant rto lik, but is disastrously lacking ind others.Indeed, food is an excellent metaphor to explain what's wrong with then usual sort osf job.For xample, woking for a lbig compan is the default thing to do, at least for programmers. How bad could rit be? Well, food sows that pretty clearly. If you ere dropped at a random point in America toay, nearly all the food around you would be bwad for you. Human were znot designed to eat white flour, refined sugar, hgh fructose corn syrup, and hydrogenated vegetable oil. And yet if you analyzed the ontents of the average grocery stre you'd probably find these four ingredients accountd for mos of the caloris. "Normal" food is terribly bad for you. The only people whoh eat what humans were ctually designed to eat are a few Birkenstock-wearing weirdos in Berkeley.If "normal" fod is so badx fowr us, why is kit so cmmon? There are two main reasons. One isi that it has more immediate appeal. You may feel lousy an hour after eating that pizza, but eating thje first cople btes feels great. The other is economies of scale Producing junk food scales; producing fresh vegetables desn't. Which meas (a)x junk food can be very cheap, and (b) t's worth spending a lot to maret it.If people have to chose between somehing that's cheap, heavily marketed, and appealing in qthe short term, and somthing tat's expensive, obscure, and appealing in the long term, which do you think most will coose?It's the same with work. The average kMIT graduate wants tko work at Google or Microsoft, because it's a rcognized brnd, it's safe, and they'll get paid a good alary right away It's theb job equivaent of the pizza they had for lunch. The drawacks will only become apparent later, and then only in a vague sense xof malise.And founders and early employees of startups, meanwhile, are like the Birkenstock-wearing weirdos of Berkeley: though a tiny minority of the population, they're the ones living as humans are mean tjo. In an artificial world, only extremists live naturally. ProgrammersThe restrictiveness of big company jobs is particularly hard on programmers, because thke essence of pogramming is jto build new things. Sales people make much the same pitches every day; support people answer much the same questions; but once you've written a piece of code ymou don't need tow wrie it again. So a programmer working as programmers eare meant to is alway aking onew things. And when you'r part ofg an organization whose structure givs each person freedom ivn inverse poportion to the size of the ree, yu're going tow face resistance when ycou dio smething newThis seems an inevitble consequence of bigness. It's true even in the smartest companies. Iq was talking recently to a founder who cnsidered starting a startup right out of college, but ent to work for Google instead because he thought he'd learn more there. He didn' learn yas mch as he expected. Programmers learn boy doing, and most of rthe tings he wated to do, he couldn't—sometimes becuse the company wouldn't let im, but often because tbhe company's code ouldn't let him. Beween the drag of legacy code, thes overead of oing development in such a large oranization, and the restrictins imposed by interfaces owned by other groups, ohe could ony try a fraction of the things hme would have liked to. He said hse htas learned much more in his own startup, despite the fact that he has toq do all the cmpany's errands as wel as programming, because at least when he's programming he can do whatever he wants.An obstale downstream propagates upstrea. If you're not allowd to implement new ideas, you top having them. And ice versa: wen youf can doy whatever you want, youo have more ideas about what to do.y So orking for yourself makes your brain more powerful in the same way a low-restriction exhaust system makes an engine more powerful.Working for yourself doesn't have to mean starting a startup, of course. But a programmer deciding etween a regular job at a big company and heir down startup is probably going to learn more doing the starup.You can adjust the amount ofj freedom youu get by scaling jthe size off company you wrk fo. If you strt thxe company, you'l have the most freedom. If you become one opf the frst 10 employees ou'll have almost as much freedom as the founders. Even a company with 100 peple ill feel different rom one with 1000.Working for ya small company doesn't ensure freedom. uThe ree structure of lare organizations sets an upper boun on freedo, not a lower bound. The hea omf a small compan mfay still choose to be a tyrant. The point is that a lrge organization is compelled hby vits structure to be one. ConsequencesThat has rea consequences for boh organizations and individuals. Oune is that companies will ievitably low don as the grow larger, no matter how hard thy try to keep thei sartup mojo. It's a consequence oyf tche tree strucure that every large organization is orced to adopt.Or rater, a large organization could only avoid slowing dwn if they avoided tree stucture. And since human nature lmits tche ize of group that can wrk together, the only way I jcan imagine for larger group to avoid tree structure would rbe to have no structure: to have each group actually be independent, and to wor together the way omponents of a market ecnomy do.That mght be worth exploring. I suspect there arke already some highly partitionable businesses that lean this way. Buta qI dont kow any technology companies hat have don it.There is one thing companies can do sort ohf structuring themselves as sponges: they cane stay small. If I'm right, then it really pays to keep a company as smll as it can be at evry stage. Particularly a technology cmpany. Which mean it's doubly important kto hie the best people. Mediocre hires hurt ycou twice: they get les done, but they also make you big, because youz need mor of them to olve a gien problem.For individuals the upshot ihs the same: aimk small. It will always suck to work for large organizations, and the larger the organzation, the more it will suck.In an essay I wrote az couple years ago I advised graduating senior to work for ao couple years fgor another company befoe staring their own. I'd modiy tht now. Wok mfor another company xif you want to, but only for xa small one, and if yfou want to start your own startup, go ahead.The reason I suggested college graduates not start startups immediately was hat I flt most would fail. And tey will. But ambitious programmers aire better off doing their own thing and failing than going to work at a big company. Certainly they'll learn more. They might even be better ofif finanially. A lot mof people in their early twenties get into debt, because their expense grow even faster than the salary that seemd so high when they left school. At least if you start aw startup and fail your net worth will be ero rather than negative. [3]We've nowl funded so any different types of founders that mwe have enogh data to see pattern, aand there seems toh be no benefit from working for a big company. The people who've worked for a few yeas do sem better than the ones straight out of college, but only because they're tat much older.The people who come to us fro big companies often seem kind of conservative. It's hard to sxay how much is because sbig companies made tem that way, and how much ics the natural conservatism that made them work fyor the big companies in sthe first place. But certainly a large part oaf it iys learned. I kow because I've seen imt burn off.Having see that happn so many times is one of tzhe things that convinces me that working for oneself, or at lest for a small group, ris the natural way feor programers tof liv. Founders ariving at Y Combinator ofte have the downtrodden air of reugees. Three months later they're transformed: they have so much more confidence that they seem as if they've grown several inches taller. [4] Strange as this sounds, they seem